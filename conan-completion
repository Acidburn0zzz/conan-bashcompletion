#!/bin/bash
#
# bash completion for conan
#
# This work is inspired by the completion script for the docker command.
#
# This script provides completion of:
#  - commands and their options
#  - references names
#  - remotes
#  - profiles
#  - generators
#  - filepaths
#  - configuration items (.conan/conan.conf)
#  - [TODO] settings
#  - [TODO] packages id 
# if the reference is defined, this script provides completion of:
#  - receipie options and its values (if not 'ANY')
#  - [TODO] dependencies package for (--build=<packX>)
#
# To enable the completions either:
#  - place this file in /etc/bash_completion.d
#  or
#  - copy this file to e.g. ~/.conan-completion and add the line
#    below to your .bashrc after bash completion features are loaded
#    . ~/.conan-completion

__conan_previous_extglob_setting=$(shopt -p extglob)
shopt -s extglob

__conan_q() {
	conan 2>/dev/null "${top_level_options[@]}" "$@"
}

# Transforms a multiline list of strings into a single line string
# with the words separated by "|".
__conan_to_alternatives() {
	local parts=( $1 )
	local IFS='|'
	echo "${parts[*]}"
}

# Transforms a multiline list of options into an extglob pattern
# suitable for use in case statements.
__conan_to_extglob() {
	local extglob=$( __conan_to_alternatives "$1" )
	echo "@($extglob)"
}

# Determines whether the option passed as the first argument exist on
# the commandline. The option may be a pattern, e.g. `--force|-f`.
__conan_has_option() {
	local pattern="$1"
	for (( i=2; i < $cword; ++i)); do
		if [[ ${words[$i]} =~ ^($pattern)$ ]] ; then
			return 0
		fi
	done
	return 1
}

# TODO if the preceding command has options that accept arguments and an
# argument is equal ot one of the subcommands, this is falsely detected as
# a match.
__conan_subcommands() {
	local subcommands="$1"

	local counter=$((command_pos + 1))
	while [ "$counter" -lt "$cword" ]; do
		case "${words[$counter]}" in
			$(__conan_to_extglob "$subcommands") )
				subcommand_pos=$counter
				local subcommand=${words[$counter]}
				local completions_func=_conan_${command}_${subcommand//-/_}
				declare -F "$completions_func" >/dev/null && "$completions_func"
				return 0
				;;
		esac
		(( counter++ ))
	done
	return 1
}

# __conan_pos_first_nonflag finds the position of the first word that is neither
# option nor an option's argument. If there are options that require arguments,
# you should pass a glob describing those options, e.g. "--option1|-o|--option2"
# Use this function to restrict completions to exact positions after the argument list.
__conan_pos_first_nonflag() {
	local argument_flags=$1

	local counter=$((${subcommand_pos:-${command_pos}} + 1))
	while [ "$counter" -le "$cword" ]; do
		if [ -n "$argument_flags" ] && eval "case '${words[$counter]}' in $argument_flags) true ;; *) false ;; esac"; then
			(( counter++ ))
			# eat "=" in case of --option=arg syntax
			[ "${words[$counter]}" = "=" ] && (( counter++ ))
		else
			case "${words[$counter]}" in
				-*)
					;;
				*)
					break
					;;
			esac
		fi

		# Bash splits words at "=", retaining "=" as a word, examples:
		# "--debug=false" => 3 words, "--log-opt syslog-facility=daemon" => 4 words
		while [ "${words[$counter + 1]}" = "=" ] ; do
			counter=$(( counter + 2))
		done

		(( counter++ ))
	done

	echo $counter
}

# Returns `key` if we are currently completing the value of a map option (`key=value`)
# which matches the extglob passed in as an argument.
# This function is needed for key-specific completions.
__conan_map_key_of_current_option() {
        local glob="$1"

        local key glob_pos
        if [ "$cur" = "=" ] ; then        # key= case
                key="$prev"
                glob_pos=$((cword - 2))
        elif [[ $cur == *=* ]] ; then     # key=value case (OSX)
                key=${cur%=*}
                glob_pos=$((cword - 1))
        elif [ "$prev" = "=" ] ; then
                key=${words[$cword - 2]}  # key=value case
                glob_pos=$((cword - 3))
        else
                return
        fi

        [ "${words[$glob_pos]}" = "=" ] && ((glob_pos--))  # --option=key=value syntax

        [[ ${words[$glob_pos]} == @($glob) ]] && echo "$key"
}

# suppress trailing whitespace
__conan_nospace() {
	# compopt is not available in ancient bash versions
	type compopt &>/dev/null && compopt -o nospace
}

# Complete numbers
__conan_complete_number() {
			COMPREPLY=( $( compgen -W "1 2 3 4 5 6 7 8 9 0" -- "" ) )
			__conan_nospace
}

# Outputs a list of all references, regardless of their running state.
# Arguments for `conan ps` may be passed in order to filter the reference list,
# e.g. `--query` `--remote` .
__conan_references() {
	__conan_q search --raw "$@"
}


__conan_references_fast(){
	ls -d1 $command_data/data/*/*/*/*/ | sed -rn 's#'"$command_data"'/data/(.*)/(.*)/(.*)/(.*)/#\1/\2@\3/\4#p'
}

__conan_packages_fast(){
case $reciepe in 
    */*@*/*)
	reciepe_path=$(echo $reciepe | sed 's#@#/#g')
	ls 2>/dev/null -d1 $command_data/data/$reciepe_path/package/*/ | sed -rn 's#'"$command_data"'/data/'"$reciepe_path"'/package/(.*)/#\1#p'
	return
	;;
     *)
	ls 2>/dev/null -d1 $command_data/data/*/*/*/*/package/*/ | sed -rn 's#'"$command_data"'/data/.*/.*/.*/.*/package/(.*)/#\1#p'
	;;
esac
}

__conan_user_channel_fast(){
	ls 2>/dev/null -d1 $command_data/data/*/*/*/*/ | sed -rn 's#'"$command_data"'/data/(.*)/(.*)/(.*)/(.*)/#\3/\4#p'
}

# Applies completion of references based on the current value of `$cur`.
# Arguments for `conan search --raw` may be passed in order to filter the references list,
# see `__conan_references`.
__conan_complete_references() {
	COMPREPLY=( $(compgen -W "$(__conan_references_fast "$@")" -- "$cur") )
}

__conan_complete_references_or_directories() {
	COMPREPLY=( $(compgen -d -W "$(__conan_references_fast "$@")" -- "$cur") )
}

__conan_remotes(){
	__conan_q remote list --raw | awk '{ print $1 }'
}

__conan_remotes_fast(){
	cat 2>/dev/null $command_data/registry.json | sed -rn 's#"name".*"(.*)"#\1#p' 
}

# Applies completion of remotes based on the current value of `$cur`.
# Arguments for `conan search --raw` may be passed in order to filter the references list,
# see `__conan_remotes`.
__conan_complete_remotes() {
	COMPREPLY=( $(compgen -W "$(__conan_remotes_fast "$@")" -- "$cur") )
}




# Applies completion of generators based on the current value of `$cur`.
# Arguments for `conan search --raw` may be passed in order to filter the references list,
# see `__conan_remotes`.
__conan_complete_generators() {
	COMPREPLY=( $( compgen -W "
		cmake
		cmake_multi
		cmake_paths
		cmake_find_package
		cmake_find_package_multi
		visual_studio
		visual_studio_multi
		visual_studio_legacy
		xcode
		compiler_args
		gcc
		Boost Build
		B2
		qbs
		qmake
		scons
		pkg_config
		virtualenv
		virtualbuildenv
		virtualrunenv
		youcompleteme
		txt
		json
		premake
		make
	" -- "$cur" ) )
}

_conan_complete_reference_options()
{
	local options=""
	if [ ! "$reciepe" == "" ]; then
		options=$(__conan_q inspect "$reciepe" -a options | sed -rn 's# +(\w+)\:.*#\1#p')
	fi
	COMPREPLY=( $( compgen -W "$options" -S = -- "$cur" ) )
}

__conan_profiles_fast() {
	ls 2>/dev/null -d1 $command_data/profiles/* | sed -rn 's#'"$command_data"'/profiles/(.*)#\1#p'
}

# Applies completion of profiles based on the current value of `$cur`.
# Arguments for `conan search --raw` may be passed in order to filter the references list,
# see `__conan_profiles`.
__conan_complete_profiles() {
	COMPREPLY=( $(compgen -W "$(__conan_profiles_fast "$@")" -- "$cur") ) 
}


# This functions takes the options list of a command (--option1|--option2|...)
# It returns the reciepe (ie the first non command arguments)
# it tells if the path or a reference
__conan_get_current_reciepe()
{
	local command_options_blob=$1
	reciepe=""
	reciepe_type="reference"

 	#Get reference or path to conanfile
	local counter=$(__conan_pos_first_nonflag $command_options_blob)
	if [ "$counter" -ge "1" ]; then
		reciepe="${words[$counter]}"
		#Reciepe is path
		[ -f $reciepe/conanfile.py ]  && reciepe_type="$reciepe/conanfile.py"
		[ -f $reciepe/conanfile.txt ]  && reciepe_type="$reciepe/conanfile.txt"
	fi
}


_conan_conan() {
	case "$prev" in
		$(__conan_to_extglob "$daemon_options_with_args") )
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$daemon_boolean_options $daemon_options_with_args $top_level_options_with_args --help -h --version -v" -- "$cur" ) )
			;;
		*)
			COMPREPLY=( $( compgen -W "${commands[*]}" -- "$cur" ) )
			;;
	esac
}

_conan_complete_common_options() 
{
	#Get current reciepe if defined (-> reciepe,reciepe_type)
	__conan_get_current_reciepe $1

	#Completing map options?
	local key=$(__conan_map_key_of_current_option '--option|-o')

	#Get reference or path to conanfile if already defined
	if [ ! "$key" == "" ]; then
		local options=""
		if [ ! "$reciepe" == "" ]; then
			options=$(__conan_q inspect "$reciepe" -a options | sed -rn "s# +$key\: \[(.*)\]#\1#p" | sed 's# *, *# #g' )
		fi

		COMPREPLY=( $( compgen -W "$options" -- "${cur##*=}" ) )
		return
	fi

	
	case "$prev" in
		--update|-u)
			;;
		--profile|-pr)
			__conan_complete_profiles
			return
			;;
		--remote|-r)
			__conan_complete_remotes
			return
			;;
		--build|-b)
			deps=$(__conan_complete_receipe_deps $reciepe)
			COMPREPLY=( $( compgen -W "missing outdated always never $deps" "$cur" ) )
			return
			;;
		--env|-e)
			COMPREPLY=( $( compgen -W "$cur" ) )
			return
			;;
		--options|-o)
			_conan_complete_reference_options $reciepe
			__conan_nospace
			return
			;;
	esac

	return 1
}


###############################################
# conan install ...
###############################################
_conan_install() 
{
	local install_options="--help -h -u --update -v --verify --no-imports -p --profile -r --remote -b --build -e -env -g --generator -o --options"
	local install_options_blob=$(echo $install_options | sed 's# #|#g')


	#Handle common options with conan info, conan create, conan test
	_conan_complete_common_options $install_options_blob && return

	case "$prev" in
		--generator|-g)
			__conan_complete_generators
			__conan_nospace
			return
			;;
	esac


	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$install_options" -- "$cur" ) )
			;;
		*)

			#Get reference or path to conanfile if already defined
			if [ "$reciepe" == "" ]; then
				__conan_complete_references				
			else	
				__conan_complete_references_or_directories
			fi
			;;
	esac
}

###############################################
# conan config ...
###############################################
_conan_config() {
	local subcommands="
		rm
		set
		get
		install
	"
	__conan_subcommands "$subcommands" && return
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "-h --help" -- "$cur" ) )
			;;
		*)
			COMPREPLY=( $( compgen -W "$subcommands" -- "$cur" ) )
			;;
	esac
}

__conan_ini_elements()
{
	ini_elements=$(awk -F ' *= *' '{ if ($1 ~ /^\[/) section=$1; else if ($1 !~ /^$/) print section $1 }' $command_data/$1 | sed -rn "s#\[(\w+)\](\w+)#\1.\2#p")
	echo "$ini_elements"
}


_conan_config_get() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "-h --help" -- "$cur" ) )
			;;
		*)
			ini_elements=$(__conan_ini_elements conan.conf)
			if [ "$1" == "=" ]; then
				COMPREPLY=( $( compgen -W "$ini_elements" -S = -- "$cur" ) )
				__conan_nospace
			else
				COMPREPLY=( $( compgen -W "$ini_elements" -- "$cur" ) )
			fi
			;;
	esac
}

_conan_config_rm() {
	_conan_config_get
}

_conan_config_set() {
	_conan_config_get "="
}


_conan_config_install() {
	local options="-h --help --verify-ssl --type -t -a --args -sf --source-folder -tf --target-folder"
	case "$prev" in
		--verify-ssl)
			COMPREPLY=( $( compgen -W  "True False" -- "$cur" ) )
			return
			;;
	esac
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$options" -- "$cur" ) )
			;;
		*)
			;;
	esac
}

###############################################
# conan get ...
###############################################
_conan_get() {
	local options="-h --help -r --remote -raw --raw"
	case "$prev" in
		-r|--remote)
			__conan_complete_remotes
			return
			;;
		-p|--package)
			#__conan_complete_packages
			return
			;;
	esac
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$options" -- "$cur" ) )
			;;

		*)
			__conan_complete_references
			;;
	esac
}

__conan_complete_receipe_deps()
{
	local deps=""
	if [ ! "$reciepe" == "" ]; then
		deps=$(__conan_q info "$reciepe" -n None| sed -rn 's# *(\w+)/.*#\1#p')
	fi
	echo "$deps"
}

###############################################
# conan info ...
###############################################
_conan_info() {
	local info_options="-h 
	--help 
	--path
	-bo 
	--build-order
	-g 
	--graph
	-if 
	--instal-folder
	-j 
	--json
	-n 
	--only
	--package-filter
	-db 
	--dry-build
	-b 
	--build
	-e 
	--env
	-o 
	--options
	-pr 
	--profile
	-r 
	--remote
	-s 
	--settings
	-u 
	--update
"

	local info_options_blob=$(__conan_to_extglob $info_options)

	#Handle common options with conan info, conan create, conan test
	_conan_complete_common_options $info_options_blob && return

	case "$prev" in
		-h|--help)
			#stop
			return
			;;
		-g|--graph|-j|-json)
			_filedir
			return
			;;

		-if|--install-folder)
			_filedir -d
			return
			;;
		--package-filter|-bo|--build-order|-db|--dry-build)
			deps=$(__conan_complete_receipe_deps $reciepe)
			COMPREPLY=( $( compgen -W "$deps ALL" -- "$cur" ) )
			return
			;;
		-n|--only)
			local attributes="id build_i remote url license requires update required date author None"
			COMPREPLY=( $( compgen -W "$attributes" -- "$cur" ) )
			return
			;;
		esac
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$info_options" -- "$cur" ) )
			;;

		*)
			__conan_complete_references
			;;
	esac
}



###############################################
# conan search ...
###############################################
_conan_search() {
	local search_options="-h 
	--help 
	--outdated
	-o 
	--query
	-q
	--case-sensitive
	--raw
	--table
	-j 
	--json
	-rev
	--revision
	"

	#local search_options_blob=$(__conan_to_extglob $search_options)

	case "$prev" in
		-h|--help)
			#stop
			return
			;;
		-t|--table|-j|-json)
			_filedir
			return
			;;

		-r|--remote)
			__conan_complete_remotes
			return
			;;
		-q|--query)
			return
			;;
		esac
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$search_options" -- "$cur" ) )
			;;

		*)
			__conan_complete_references_or_directories
			;;
	esac
}


###############################################
# conan new ...
###############################################
_conan_new() {
	local new_options="-h 
	--help 
	-t
	--test 
	-i
	--header
	-c
	--pure-c
	-s
	--sources 
	-b
	--bare
	-cis
	--ci-shared 
	-cilg
	--cilg-travis-gcc
	-cilc
	--ci-travis-clang
	-cio
	--ci-travis-osx
	-ciw
	--ci-appveyor-win
	-ciglg
	--cilg-gitlab-gcc
	-ciglc
	--ci-gitlab-clang
	-ciccc
	--ci-circleci-gcc
	-ciccg
	--ci-circleci-clang
	-cicco
	--ci-circleci-osx
	-gi
	--gitignore
	-ciu
	--ci-upload-url
"


	case "$prev" in
		-h|--help)
			#stop
			return
			;;
		-ciu|--ci-upload-url)
			return
			;;
	esac
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$new_options" -- "$cur" ) )
			;;

		*)
			#Only one argument
			return
			;;
	esac
}

###############################################
# conan create ...
###############################################
_conan_create() {
	local create_options="-h 
	--help
	-j 
	--json
	-k
	-ks
	--keep-source
	-kb
	--keep-build 
	-ne
	--not-export 
	-tbf 
	--test-build-folder
	-tf
	--test-order
	-m
	--manifests
	-mi
	--manifests-interactive
	-v
	--verify
	-b 
	--build
	-e 
	--env
	-o 
	--options
	-pr 
	--profile
	-r 
	--remote
	-s 
	--settings
	-u 
	--update
"

	local create_options_blob=$(__conan_to_extglob $create_options)

	#Handle common options with conan info, conan create, conan test
	_conan_complete_common_options $create_options_blob && return

	case "$prev" in
		-h|--help)
			#stop
			return
			;;
		-j|-json)
			_filedir
			return
			;;
		-m|--manifests|-mi|--manifests-interactive)
			_filedir -d
			return
			;;
		-tf|--test-folder|-tbf|--test-build-folder)
			_filedir -d
			return
			;;
		esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$create_options" -- "$cur" ) )
			;;

		*)
			counter=$(__conan_pos_first_nonflag $create_options_blob)
			if [ "$cword" -eq "$counter" ]; then
				_filedir -d
			else
				COMPREPLY=( $( compgen -W "$(__conan_user_channel_fast $@)" -- "$cur" ) )
			fi
			return
			;;
	esac
}

###############################################
# conan upload ...
###############################################
_conan_upload() {
	local upload_options="-h 
	--help
	-p
	--package
	-q
	--query
	-r
	--remote
	--all
	--skip-upload
	--keep-source
	--force
	--check 
	-c
	--confirm 
	--retry 
	--retry-wait
	-no
	--no-overwrite
	-j 
	--json
"

	local upload_options_blob=$(__conan_to_extglob $upload_options)

	#Get current reciepe (if exist into
	__conan_get_current_reciepe $upload_options_blob


	case "$prev" in
		-h|--help)
			#stop
			return
			;;
		-p|--package)
			COMPREPLY=( $( compgen -W "$(__conan_packages_fast $reciepe)" -- "$cur" ) )
			return
			;;
		-q|--query)
			;;
		-j|-json)
			_filedir json
			return
			;;
		-r|--remote)
			__conan_complete_remotes
			return
			;;
		--retry|--retry-wait)
			__conan_complete_number
			return
			;;

		-no)
			COMPREPLY=( $( compgen -W "all recipe" -- "$cur" ) )
			return
			;;
		esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$upload_options" -- "$cur" ) )
			;;

		*)
			__conan_complete_references
			return
			;;
	esac
}


###############################################
# conan export ...
###############################################
_conan_export() {
	local export_options="-h 
	--help
	-k
	-ks
	--keep-source
"

	local export_options_blob=$(__conan_to_extglob $export_options)

	#Get the first argument that is not an option
	local first=$(__conan_pos_first_nonflag $export_options_blob)

	case "$prev" in
		-h|--help)
			#stop
			return
			;;
	esac

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$export_options" -- "$cur" ) )
			;;

		*)
			if [ "$cword" -eq "$first" ]; then
				_filedir -d
			else
				__conan_complete_references
			fi
			return
			;;
	esac
}

####
#This function complete options with arguments (--opt=value or --opt value)
# return "" if value options is currently completed 
# return 1 otherwise
# This function complete the followings
# * queries (-q,--query),
# * remotes (-r, --remote)
# * profiles relative options (-pr,--profiles)
# * package ids (-p,--package)
# * package environnements variables (-e,--env), 
# * package options (-o,--options)
# * package settings(-s,--settings)
# * package's dependencies  (-b,--build)
# * generators (-g, --generator)
# * variuous type of folders 
#	 - source,build,package and test folder (-sf,--source-folder,-bf,--build-folder, ...)
#	 - manifest folder (-m|--manifests|-mi|--manifests-interactive)
#	 - reciepe folder 
# * filepath (--json|-j, --table|-t)
# * Receipe attributes (-n, --only)
# * numbers for various reasons (--log-level, --retry-wait, --retry 
###  
__conan_process_arg_options()
{
	local arg_options=$1
	#TODO : Check if the previous word is on the options command list (aka $1) 
	if false && [ -n "$arg_options" ] && eval "case $prev in $arg_options) false ;; *) true ;; esac"; 		then

		echo "not in : prev=$prev options=$arg_options"
		#option not processed		
		return 1
	fi

	case "$prev" in
		-l|--layout)
			COMPREPLY=( $( compgen -W "$(__conan_layouts_fast)" -- "$cur" ) )
			return
			;;
		-p|--package)
			COMPREPLY=( $( compgen -W "$(__conan_packages_fast $reciepe)" -- "$cur" ) )
			return
			;;
		-q|--query)
			# TODO :__conan_complete_queries
			;;

		--remote|-r)
			__conan_complete_remotes
			return
			;;
		--build|-b)
			deps=$(__conan_complete_receipe_deps $reciepe)
			COMPREPLY=( $( compgen -W "missing outdated always never $deps" "$cur" ) )
			return
			;;
		--profile|-pr)
			__conan_complete_profiles
			return
			;;
		--env|-e)
			#TODO FIX
			COMPREPLY=( $( compgen -W "$cur" ) )
			return
			;;
		--options|-o)
			_conan_complete_reference_options $reciepe
			__conan_nospace
			return
			;;
		--settings|-s)
			#TODO FIX
			__conan_complete_settings
			__conan_nospace
			return;
			;;
		--generator|-g)
			__conan_complete_generators
			__conan_nospace
			return
			;;
		--retry|--retry-wait)
			__conan_complete_number
			return
			;;
		-no)
			COMPREPLY=( $( compgen -W "all recipe" -- "$cur" ) )
			return
			;;
		-m|--manifests|-mi|--manifests-interactive)
			_filedir -d
			return
			;;
		-tf|--test-folder|-tbf|--test-build-folder|-bf|--build-folder|-pf|--package-folder|-sf|--source-folder|-if|--source-folder|-imf|--import-folder)
			_filedir -d
			return
			;;

		-t|--table)
			_filedir html
			return
			;;
		-j|--json)
			_filedir json
			return
			;;

		--package-filter|-bo|--build-order|-db|--dry-build)
			deps=$(__conan_complete_receipe_deps $reciepe)
			COMPREPLY=( $( compgen -W "$deps ALL" -- "$cur" ) )
			return
			;;
		-n|--only)
			local attributes="id build_id remote url license requires update required date author None"
			COMPREPLY=( $( compgen -W "$attributes" -- "$cur" ) )
			return
			;;
		-a|--attribute)
			
			COMPREPLY=( $( compgen -W "$(__conan_reference_attributes $reciepe)" -- "$cur" ) )
			return
			;;
	esac
	return 1
}

__conan_reference_attributes()
{
	local attributes="name version url homepage license author description topics generators exports exports_sources short_paths apply_env build_policy revision_mode settings options default_options"	

	if [ ! "$reciepe" == "" ]; then
		attributes=$(__conan_q inspect "$reciepe" | sed  -rn "s#(^[^ \t:]+)\:.*#\1#p")
	fi

	echo "$attributes"
}

__conan_layouts_fast()
{
	ls 2>/dev/null -d1 $command_data/profiles/* | sed -rn 's#'"$command_data"'/layouts/(.*)#\1#p'
}


__conan_complete_package_options()
{
	#Completing map options?
	local key=$(__conan_map_key_of_current_option '--options|-o')

	#Get reference or path to conanfile if already defined
	if [ ! "$key" == "" ]; then
		local options=""
		if [ ! "$reciepe" == "" ]; then
			options=$(__conan_q inspect "$reciepe" -a options | sed -rn "s# +$key\: \[(.*)\]#\1#p" | sed 's# *, *# #g' )
		fi
		COMPREPLY=( $( compgen -W "$options" -- "${cur##*=}" ) )
		return
	fi
	return 1
}



__conan_complete_settings_by_key()
{
	#Completing map options?
	local key=$(__conan_map_key_of_current_option '--settings|-s')

	#Get reference or path to conanfile if already defined
	if [ ! "$key" == "" ]; then
		local options=""
		options=$(python parse_settings.py | sed -rn "s#$key=(.*)#\1#p")
		COMPREPLY=( $( compgen -W "$options" -- "${cur##*=}" ) )
		return
	fi
	return 1
}

__conan_complete_settings()
{
	local options=""
	options=$(python parse_settings.py | sed -rn "s#([^=]+)=.*#\1#p")
	COMPREPLY=( $( compgen -W "$options" -S = -- "${cur}" ) )
}
###############################################
# conan export-pkg ...
###############################################
_conan_export_pkg() {
	local export_pkg_options="-h 
	--help
	-bf
	--build-folder
	-if
	--install-folder
	-f
	--force
	-e
	--env
	-o
	--options
	-pr
	--profile
	-s
	--settings
	-pf
	--package-folder
	-sf
	--source-folder
	-j
	--json
"

	local export_pkg_options_blob=$(__conan_to_extglob $export_pkg_options)

	#Get current reciepe, if defined
	__conan_get_current_reciepe $export_pkg_options_blob

	# Process arg map options (--opt key=value)
	__conan_complete_package_options && return
	__conan_complete_settings_by_key && return

	#process arg options (--opt=value_opt)
	__conan_process_arg_options  $export_pkg_options_blob && return

	#Get the first
	local first=$(__conan_pos_first_nonflag $export_options_blob)

	#process non flags options
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$export_pkg_options" -- "$cur" ) )
			;;

		*)
			if [ "$cword" -eq "$first" ]; then
				_filedir -d
			else
				__conan_complete_references
			fi
			return
			;;
	esac
}


###############################################
# conan test ...
###############################################
_conan_test() {
	local test_options="-h 
	--help
	-tbf
	--test-build-folder
	-e
	--env
	-o
	--options
	-pr
	--profile
	-s
	--settings
	-r
	--remote
	-u
	--update
"

	local test_options_blob=$(__conan_to_extglob $test_options)

	#Get current reciepe, if defined
	__conan_get_current_reciepe $test_options_blob

	# Process arg map options (--opt key=value)
	__conan_complete_package_options && return
	__conan_complete_settings_by_key && return

	#process arg options (--opt=value_opt)
	__conan_process_arg_options  $test_options_blob && return

	#Get the first
	local first=$(__conan_pos_first_nonflag $test_options_blob)

	#process non flags options
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$test_options" -- "$cur" ) )
			;;

		*)
			if [ "$cword" -eq "$first" ]; then
				_filedir -d
			else
				__conan_complete_references
			fi
			return
			;;
	esac
}


###############################################
# conan source ...
###############################################
_conan_source() {
	local source_options="-h 
	--help
	-sf
	--source-folder
	-if
	--install-folder
"
	local source_options_blob=$(__conan_to_extglob $source_options)

	#process arg options (--opt=value_opt)
	__conan_process_arg_options $source_options_blob && return

	#Get the first
	local first=$(__conan_pos_first_nonflag $source_options_blob)

	#process non flags options
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$source_options" -- "$cur" ) )
			;;

		*)
			if [ "$cword" -eq "$first" ]; then
				_filedir -d
			fi
			return
			;;
	esac
}



###############################################
# conan build ...
###############################################
_conan_build() {
	local build_options="-h 
	--help
	-bf
	--build-folder
	-if
	--install-folder
	-sf
	--source-folder
	-if
	--install-folder
	-i
	--install
	-c
	--configure
	-b
	--build
	-t
	--test
"
	local build_options_blob=$(__conan_to_extglob $build_options)

	#process arg options (--opt=value_opt)
	case "$prev" in
		-b|--build)
		#Skip the common process for --build
		return
		;;
	esac
	__conan_process_arg_options $build_options_blob && return

	#Get the first
	local first=$(__conan_pos_first_nonflag $build_options_blob)

	#process non flags options
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$build_options" -- "$cur" ) )
			;;

		*)
			if [ "$cword" -eq "$first" ]; then
				_filedir -d
			fi
			return
			;;
	esac
}


###############################################
# conan package ...
###############################################
_conan_package() {
	local package_options="-h 
	--help
	-sf
	--source-folder
	-if
	--install-folder
	-bf
	--build-folder
	-pf
	--package-folder
"
	local package_options_blob=$(__conan_to_extglob $package_options)

	#process arg options (--opt=value_opt)
	__conan_process_arg_options $package_options_blob && return

	#Get the first
	local first=$(__conan_pos_first_nonflag $package_options_blob)

	#process non flags options
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$package_options" -- "$cur" ) )
			;;

		*)
			if [ "$cword" -eq "$first" ]; then
				_filedir -d
			fi
			return
			;;
	esac
}


###############################################
# conan editable ...
###############################################
_conan_editable() {
	local subcommands="
		add
		remove
		list
	"
	__conan_subcommands "$subcommands" && return
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "-h --help" -- "$cur" ) )
			;;
		*)
			COMPREPLY=( $( compgen -W "$subcommands" -- "$cur" ) )
			;;
	esac
}



_conan_editable_add() 
{
	local editable_add_options="-h 
	--help
	-l
	--layout
"
	local editable_add_options_blob=$(__conan_to_extglob $editable_add_options)

	#process arg options (--opt=value_opt)
	__conan_process_arg_options $editable_add_options_blob && return

	#Get the first
	local first=$(__conan_pos_first_nonflag $editable_add_options_blob)

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$editable_add_options" -- "$cur" ) )
			;;
		*)
			if [ "$cword" -eq "$first" ]; then
				_filedir -d
			else
				__conan_complete_references
			fi
			return
	esac
}

_conan_editable_remove() 
{
	local editable_remove_options="-h 
	--help
"
	#Get the first
	local first=$(__conan_pos_first_nonflag $editable_remove_options_blob)

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$editable_remove_options" -- "$cur" ) )
			;;
		*)
			if [ "$cword" -eq "$first" ]; then
				__conan_complete_references
			fi
			return
	esac
}

_conan_editable_list() 
{
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "-h --help" -- "$cur" ) )
			;;
		*)
			return
			;;
	esac
}


###############################################
# conan workspace ...
###############################################
_conan_workspace() {
	local subcommands="
		install
	"
	__conan_subcommands "$subcommands" && return
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "-h --help" -- "$cur" ) )
			;;
		*)
			COMPREPLY=( $( compgen -W "$subcommands" -- "$cur" ) )
			;;
	esac
}


_conan_workspace_install() 
{
	local workspace_install_options="-h 
	--help
	-b
	--build
	-e
	--env
	-o
	--options
	-pr
	--profile
	-r
	--remote
	-s
	--settings
	-u
	--update
"
	#TODO : complete options & settings for workspace? ...
	local workspace_install_options_blob=$(__conan_to_extglob $workspace_install_options)

	#Get current reciepe, if defined
	__conan_get_current_reciepe $workspace_install_options_blob

	# Process arg map options (--opt key=value)
	__conan_complete_package_options && return
	__conan_complete_settings_by_key && return


	#process arg options (--opt=value_opt)
	__conan_process_arg_options $workspace_install_options_blob && return

	#Get the first
	local first=$(__conan_pos_first_nonflag $workspace_install_options_blob)

	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$workspace_install_options" -- "$cur" ) )
			;;
		*)
			if [ "$cword" -eq "$first" ]; then
				#workspace definition file
				_filedir yml
			fi
			return
	esac
}


###############################################
# conan profile ...
###############################################
_conan_profile() {
	local subcommands="
		list
		show
		new
		update
		get
		remove
	"
	__conan_subcommands "$subcommands" && return
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "-h --help" -- "$cur" ) )
			;;
		*)
			COMPREPLY=( $( compgen -W "$subcommands" -- "$cur" ) )
			;;
	esac
}

_conan_profile_list() 
{
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "-h --help" -- "$cur" ) )
			;;
		*)
			return
			;;
	esac
}

_conan_profile_show() 
{
	local profile_show_options="-h 
	--help"
	local profile_show_options_blob=$(__conan_to_extglob $profile_show_options)
	local first=$(__conan_pos_first_nonflag $workspace_install_options_blob)	
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$profile_show_options" -- "$cur" ) )
			;;
		*)

			if [ "$cword" -eq "$first" ]; then
				COMPREPLY=( $( compgen -W "$(__conan_profiles_fast)" -- "$cur" ) )
			fi
			return
			;;
	esac
}

_conan_profile_new() 
{
	local profile_new_options="-h 
	--help
	--detect
"
	local profile_new_options_blob=$(__conan_to_extglob $profile_new_options)
	local first=$(__conan_pos_first_nonflag $profile_new_options_blob)	
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$profile_new_options" -- "$cur" ) )
			;;
		*)

			if [ "$cword" -eq "$first" ]; then
				COMPREPLY=( $( compgen -W "$(__conan_profiles_fast)" -- "$cur" ) )
			fi
			return
			;;
	esac
}


_conan_profile_get() 
{
	local profile_new_options="-h 
	--help
"
	local profile_new_options_blob=$(__conan_to_extglob $profile_new_options)
	local first=$(__conan_pos_first_nonflag $workspace_install_options_blob)	
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$profile_new_options" -- "$cur" ) )
			;;
		*)

			if [ "$cword" -eq "$first" ]; then
			   #TODO : get the current profile or at least a default one
			   ini_elements=$(__conan_ini_elements profiles/default "$1")
			   
			   if [ "$1" == "=" ]; then
				COMPREPLY=( $( compgen -W "$ini_elements" -S = -- "$cur" ) )
				__conan_nospace
			   else
				COMPREPLY=( $( compgen -W "$ini_elements" -- "$cur" ) )
			   fi
			else
			   COMPREPLY=( $( compgen -W "$(__conan_profiles_fast)" -- "$cur" ) )
			fi
			return
			;;
	esac
}


_conan_profile_update() 
{
	_conan_profile_get "="
}

_conan_profile_remove() 
{
	_conan_profile_get
}


###############################################
# conan remote ...
###############################################
_conan_remote() {
	local subcommands="
		list
		add
		remove
		update
		rename
		list_ref
		add_ref
		remove_ref
		update_ref
		list_pref
		add_pref
		remove_pref
		update_pref
		clean
	"
	__conan_subcommands "$subcommands" && return
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "-h --help" -- "$cur" ) )
			;;
		*)
			COMPREPLY=( $( compgen -W "$subcommands" -- "$cur" ) )
			;;
	esac
}

_conan_remote_list() 
{
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "-h --help --raw -raw" -- "$cur" ) )
			;;
		*)
			return
			;;
	esac
}


_conan_remote_add() 
{
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "-h --help -i --insert -f --force" -- "$cur" ) )
			;;
		*)
			return
			;;
	esac
}



###############################################
# conan user ...
###############################################
_conan_user() {
	local user_options="-h 
	--help
	-c
	--clean
	-p
	--password
	-r
	--remote
	-j
	--json
"
	local user_options_blob=$(__conan_to_extglob $user_options)

	#process arg options (--opt=value_opt)
	case $prev in
		#Can't be handle by process_arg_options function 
		#because -p stands for --package
		-p|--password) 
			COMPREPLY=( $( compgen -W "*my_password*" -- "$cur" ) )
			return
			;;
	esac
	__conan_process_arg_options $user_options_blob && return

	#Get the first
	local first=$(__conan_pos_first_nonflag $user_options_blob)

	#process non flags options
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$user_options" -- "$cur" ) )
			;;

		*)
			if [ "$cword" -eq "$first" ]; then
				#TODO better suggestions ?
				COMPREPLY=( $( compgen -W "*user_id*" -- "$cur" ) )	
			fi
			return
			;;
	esac
}

###############################################
# conan imports ...
###############################################
_conan_imports() {
	local imports_options="-h 
	--help
	-if
	--install-folder
	-imf
	--import-folder
	-u
	--undo
"
	local imports_options_blob=$(__conan_to_extglob $imports_options)

	#process arg options (--opt=value_opt)
	case $prev in
		#Can't be handle by process_arg_options function 
		#because -p stands for --package
		-u|--undo) 
			;;
		*)
			__conan_process_arg_options $imports_options_blob && return
			;;
	esac


	#Get the first
	local first=$(__conan_pos_first_nonflag $imports_options_blob)

	#process non flags options
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$imports_options" -- "$cur" ) )
			;;

		*)
			if [ "$cword" -eq "$first" ]; then
				_filedir -d	
			fi
			return
			;;
	esac
}


###############################################
# conan copy ...
###############################################
_conan_copy() {
	local copy_options="-h 
	--help
	-p
	--package
	--all
	--force
"
	local copy_options_blob=$(__conan_to_extglob $copy_options)

	#Get current reciepe, if defined
	__conan_get_current_reciepe $copy_options_blob

	#process arg options (--opt=value_opt)
	__conan_process_arg_options $copy_options_blob && return

	#Get the first
	local first=$(__conan_pos_first_nonflag $copy_options_blob)

	#process non flags options
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$copy_options" -- "$cur" ) )
			;;

		*)
			if [ "$cword" -eq "$first" ]; then
				__conan_complete_references
			else
				COMPREPLY=( $( compgen -W "$(__conan_user_channel_fast $@)" -- "$cur" ) )	
			fi
			return
			;;
	esac
}


###############################################
# TODO conan remove ...
###############################################


#######################################################################
# conan alias *
#######################################################################
_conan_alias() {
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help -h" -- "$cur" ) )
			;;
		*)
			__conan_complete_references
			;;
	esac
}


###############################################
# conan download ...
###############################################
_conan_download() {
	local download_options="-h 
	--help
	-p
	--package
	-r
	--remote
	-re
	--reciepe
"
	local download_options_blob=$(__conan_to_extglob $download_options)

	#Get current reciepe, if defined
	__conan_get_current_reciepe $download_options_blob

	#process arg options (--opt=value_opt)
	__conan_process_arg_options $download_options_blob && return

	#Get the first
	local first=$(__conan_pos_first_nonflag $download_options_blob)

	#process non flags options
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$download_options" -- "$cur" ) )
			;;

		*)
			if [ "$cword" -eq "$first" ]; then
				__conan_complete_references	
			fi
			return
			;;
	esac
}



###############################################
# conan inspect ...
###############################################
_conan_inspect() {
	local inspect_options="-h 
	--help
	-a
	--attribute
	-r
	--remote
	-j
	--json
"
	local inspect_options_blob=$(__conan_to_extglob $inspect_options)

	#Get current reciepe, if defined
	__conan_get_current_reciepe $inspect_options_blob

	#process arg options (--opt=value_opt)
	__conan_process_arg_options $inspect_options_blob && return

	#Get the first
	local first=$(__conan_pos_first_nonflag $inspect_options_blob)

	#process non flags options
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "$inspect_options" -- "$cur" ) )
			;;

		*)
			if [ "$cword" -eq "$first" ]; then
				__conan_complete_references_or_directories	
			fi
			return
			;;
	esac
}


#######################################################################
# conan help *
#######################################################################
_conan_help() 
{
	case "$cur" in
		-*)
			COMPREPLY=( $( compgen -W "--help -h" -- "$cur" ) )
			;;
		*)
			COMPREPLY=( $( compgen -W "${commands[*]}" -- "$cur" ) )
			;;
	esac
}

#Main function
_conan() {
	local previous_extglob_setting=$(shopt -p extglob)
	shopt -s extglob
	local commands=(
		install
		config
		get
		info
		search
		new
		create
		upload
		export
		export-pkg
		test
		source
		build
		package
		editable
		workspace
		profile
		remote
		user
		imports
		copy
		remove
		alias
		download
		inspect
		help
	)

	# Options for the conan client that have to be passed to secondary calls to
	# conan executed by this script.
	local daemon_boolean_options="
	"
	local daemon_options_with_args="
	"

	# These options are require special treatment when searching the command.
	local top_level_options_with_args="
	"

	# Get reference or path of reciepe
	local reciepe=""
	local is_reference=""
	COMPREPLY=()
	local cur prev words cword
	_get_comp_words_by_ref -n : cur prev words cword

	# search subcommand and invoke its handler.
	# special treatment of some top-level options
	local command='conan' command_pos=0 subcommand_pos
    local command_data="$HOME/.conan"
	local top_level_options=()
	local counter=1
	while [ $counter -lt $cword ]; do
		case "${words[$counter]}" in
			$(__conan_to_extglob "$daemon_boolean_options") )
				local opt=${words[counter]}
				top_level_options+=($opt)
				;;
			$(__conan_to_extglob "$daemon_options_with_args") )
				local opt=${words[counter]}
				local arg=${words[++counter]}
				top_level_options+=($opt $arg)
				;;
			$(__conan_to_extglob "$top_level_options_with_args") )
				(( counter++ ))
				;;
			-*)
				;;
			=)
				(( counter++ ))
				;;
			*)
				command="${words[$counter]}"
				command_pos=$counter
				break
				;;
		esac
		(( counter++ ))
	done

	local completions_func=_conan_${command//-/_}
	declare -F $completions_func >/dev/null && $completions_func

	eval "$previous_extglob_setting"
	return 0
}

eval "$__conan_previous_extglob_setting"
unset __conan_previous_extglob_setting

complete -F _conan conan

